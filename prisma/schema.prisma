// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Post {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    caption      String?
    images       String[]
    likes        Like[]
    comments     Comment[]
    location     String?
    hideLikes    Boolean?    @default(false)
    hideComments Boolean?    @default(false)
    savedPost    savedPost[]

    @@index([createdById])
}

model savedPost {
    id     String @id @default(cuid())
    User   User   @relation(fields: [userId], references: [id])
    userId String

    Post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@unique([postId, userId])
}

model Like {
    User   User   @relation(fields: [userId], references: [id])
    userId String

    Post   Post   @relation(fields: [postId], references: [id])
    postId String

    @@id([postId, userId])
}

model Comment {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String

    Post   Post   @relation(fields: [postId], references: [id])
    postId String
    likes  Int    @default(0)
    author User   @relation(fields: [userId], references: [id])
    userId String

    replyToId String?
    replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade)
    replies   Comment[] @relation("ReplyTo")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    userName      String?     @unique
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Comments      Comment[]
    likes         Like[]
    profilePhoto  String?
    followedBy    Follows[]   @relation("followedBy")
    following     Follows[]   @relation("following")
    savedPost     savedPost[]

    @@index([userName])
}

model Follows {
    id           String @unique @default(uuid())
    followedBy   User   @relation("followedBy", fields: [followedById], references: [id])
    followedById String
    following    User   @relation("following", fields: [followingId], references: [id])
    followingId  String

    @@id([followingId, followedById])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
